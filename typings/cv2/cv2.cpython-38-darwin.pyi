"""This type stub file was generated by pyright.""""""This type stub file was generated by pyright."""@<Expression>@<Expression>class :   ...@<Expression>class :   ...@~ fclass :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>@<Expression>class :   ...@<Expression>@<Expression>class :   ...@<Expression>@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...t = <Expression>@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...y: <Expression>@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...@<Expression>class :   ...z: <Expression>@<Expression>class :   ...@hclass :   ...buildflags = <Expression>opencl = <Expression>buildflags = <Expression>WARNING: OpenCV - OpenCLcontrol: 4.5Platform: <Expression>Timestamp: 2021 - 0T12: 34Host: DarwinCMake: 3.18generator: Unixtool: <Expression>Configuration: Releasefeatures: <Expression>Baseline: SSErequested: DETECTgeneration: SSE4_2requested: SSE4_1Compiler: <Expression>ccache: YESheaders: NOdependencies: - frameworkdependencies: ittnotifymodules: <Expression>built: calib3dDisabled: worlddependency: - <Expression>Unavailable: javaApplications: - <Expression>Documentation: NOalgorithms: NOGUI: <Expression>Cocoa: YESsupport: NOZLib: build(ver)JPEG: build - libjpeg - turbo(ver)WEBP: build(ver)PNG: build(ver)TIFF: build(ver)OpenEXR: build(ver)HDR: YESSUNRASTER: YESPXM: YESPFM: YESDC1394: NOFFMPEG: YESavcodec: YES(58.54)avformat: YES(58.29)avutil: YES(56.31)swscale: YES(5.5)avresample: YES(4)GStreamer: NOAVFoundation: YESframework: GCDTrace: YES(with)libraries: <Expression>IPP: 2020at: <Expression>IW: sources(2020)at: <Expression>Lapack: YES(<Expression>)Eigen: YES(ver)HAL: NOProtobuf: build(3.5)OpenCL: YES(no)path: NOlibraries: - frameworkInterpreter: <Expression>Libraries: <Expression>numpy: <Expression>path: pythonJava: <Expression>ant: NOJNI: <Expression>wrappers: NOtests: NOto: <Expression>ERROR: *<Expression>OPENCV_DUMP_CONFIG = 1features: <Expression>e2 = (srcelem2, zero) = workT(0)e2 = srcelem2e2 = (srcelem2, zero) = workT(0)e2 = srcelem2e1 = (srcelem1, zero) = workT(0)e1 = srcelem1e1 = (srcelem1, zero) = workT(0)e1 = srcelem1tmp = atan2(srcelem2, srcelem1)tmp = degrees(atan2(srcelem2, srcelem1))value = mad24(srcelem1, workT(alpha), workT(beta))value = fma(srcelem1, workT(alpha), workT(beta))x = (srcelem1, y) = srcelem2x2 = (x * x, y2) = y * ymagnitude = sqrt(x2 + y2)tmp = y >= 0x = (srcelem1, y) = (srcelem2, cosval)if isnan(srcelem1):   ...x = get_global_id(0)y0 = get_global_id(1) * rowsPerWIx = get_global_id(0)y0 = get_global_id(1) * rowsPerWIx = get_global_id(0)y0 = get_global_id(1) * rowsPerWIx = get_global_id(0)y0 = get_global_id(1) * rowsPerWIx = get_global_id(0)y0 = get_global_id(1) * rowsPerWIx = clamp(x, 0, cols - 1)x = get_global_id(0)y0 = get_global_id(1) * rowsPerWIscalar = convertScalar(nVal)src_index = mad24(y, src_step, mad24(x, int))x = get_global_id(0)y = get_global_id(1)x = get_global_id(0)y0 = get_global_id(1) * rowsPerWIx = get_global_id(0)y0 = get_global_id(1) * rowsPerWICV_8U_MAX = 255CV_8U_HALF = 128BT601_BLACK_RANGE = 16CV_8U_SCALE = 1d1 = BT601_BLACK_RANGE / CV_8U_MAXd2 = CV_8U_HALF / CV_8U_MAXx = get_global_id(0)y = get_global_id(1)x = get_global_id(0)y = get_global_id(1)k = x & block_size - 1a1 = mul_complex(<Expression>)dst_ind = x << 1 - kk = x & block_size - 1a1 = mul_complex(<Expression>)a2 = mul_complex(<Expression>)a3 = mul_complex(<Expression>)dst_ind = x - k << 2 + kb0 = a0 + a2a2 = a0 - a2b1 = a1 + a3a3 = twiddle(a1 - a3)k = x % block_sizea1 = mul_complex(<Expression>)a2 = mul_complex(<Expression>)dst_ind = x - k * 3 + kb1 = a1 + a2a2 = twiddle(sin_120 * a1 - a2)b0 = a0 - CT(0.5)k = x % block_sizea1 = mul_complex(<Expression>)a2 = mul_complex(<Expression>)a3 = mul_complex(<Expression>)a4 = mul_complex(<Expression>)dst_ind = x - k * 5 + kb1 = a1 + a4a4 = a3 + a2a2 = b1 + a4b0 = a0 - CTb1 = fft5_2 * b1 - a4a4 = fft5_3 * CT(- a1.y - a3.y, a1.x + a3.x)b5 = CT(a4.x - fft5_5 * a1.y, a4.y + fft5_5 * a1.x)a1 = b0 + b1x2 = x1 + t / 2x2 = x1 + t / 3x3 = x1 + 2 * t / 3thread_block = t / 4x2 = x1 + thread_blockx3 = x1 + 2 * thread_blockx4 = x1 + 3 * thread_blockthread_block = t / 5x2 = x1 + thread_blockx3 = x1 + 2 * thread_blockx4 = x1 + 3 * thread_blockx5 = x1 + 4 * thread_blockx2 = x1 + t / 2x2 = x1 + t / 3x3 = x2 + t / 3k = x % block_sizex2 = x1 + t / 2x2 = x1 + t / 3x3 = x2 + t / 3thread_block = t / 4x2 = x1 + thread_blockx3 = x1 + 2 * thread_blockx4 = x1 + 3 * thread_blockk = x % block_sizex2 = x1 + t / 2x = get_global_id(0)y = get_group_id(1)block_size = LOCAL_SIZE / kercnx = get_group_id(0)y = get_global_id(1)x = get_global_id(0)y = get_group_id(1)block_size = LOCAL_SIZE / kercnscale = FTscale = FTx = get_group_id(0)y = get_global_id(1)x = get_global_id(0)y0 = get_global_id(1) * PIX_PER_WI_Yx = get_global_id(0)y0 = get_global_id(1) * PIX_PER_WI_Yx = get_global_id(0)y0 = get_global_id(1) * PIX_PER_WI_Yx = get_global_id(0)y = get_global_id(1)lidx = get_local_id(0)lidy = get_local_id(1)@5class :   ...k: <Expression>q: <Expression>y: <Expression>